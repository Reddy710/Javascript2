cheat sheet for SQL (Structured Query Language)

**1. Basic SQL Commands:**

- **SELECT**: Retrieve data from one or more tables.
  ```sql
  SELECT column1, column2 FROM table_name WHERE condition;
  ```

- **INSERT**: Insert data into a table.
  ```sql
  INSERT INTO table_name (column1, column2) VALUES (value1, value2);
  ```

- **UPDATE**: Modify existing records in a table.
  ```sql
  UPDATE table_name SET column1 = value1 WHERE condition;
  ```

- **DELETE**: Delete records from a table.
  ```sql
  DELETE FROM table_name WHERE condition;
  ```

**2. SQL Clauses:**

- **WHERE**: Used to filter rows.
  ```sql
  SELECT * FROM table_name WHERE condition;
  ```

- **ORDER BY**: Sort the result set.
  ```sql
  SELECT * FROM table_name ORDER BY column1 ASC;
  ```

- **GROUP BY**: Group rows based on a column.
  ```sql
  SELECT column1, COUNT(*) FROM table_name GROUP BY column1;
  ```

- **HAVING**: Filter groups created by GROUP BY.
  ```sql
  SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;
  ```

- **LIMIT**: Limit the number of rows returned.
  ```sql
  SELECT * FROM table_name LIMIT 10;
  ```

**3. SQL Functions:**

- **COUNT**: Count the number of rows or non-null values.
  ```sql
  SELECT COUNT(*) FROM table_name;
  ```

- **SUM**: Calculate the sum of values in a column.
  ```sql
  SELECT SUM(column1) FROM table_name;
  ```

- **AVG**: Calculate the average of values in a column.
  ```sql
  SELECT AVG(column1) FROM table_name;
  ```

- **MAX and MIN**: Find the maximum and minimum values in a column.
  ```sql
  SELECT MAX(column1), MIN(column2) FROM table_name;
  ```

**4. Joins:**

- **INNER JOIN**: Retrieve records that have matching values in both tables.
  ```sql
  SELECT * FROM table1 INNER JOIN table2 ON table1.column1 = table2.column1;
  ```

- **LEFT JOIN**: Retrieve all records from the left table and matched records from the right table.
  ```sql
  SELECT * FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1;
  ```

- **RIGHT JOIN**: Retrieve all records from the right table and matched records from the left table.
  ```sql
  SELECT * FROM table1 RIGHT JOIN table2 ON table1.column1 = table2.column1;
  ```

- **FULL OUTER JOIN**: Retrieve all records when there is a match in either the left or right table.
  ```sql
  SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column1 = table2.column1;
  ```

**5. SQL Constraints:**

- **PRIMARY KEY**: Uniquely identifies each record in a table.
  ```sql
  CREATE TABLE table_name (column1 INT PRIMARY KEY);
  ```

- **FOREIGN KEY**: Creates a link between tables.
  ```sql
  CREATE TABLE table1 (id INT PRIMARY KEY);
  CREATE TABLE table2 (id INT, foreign_key_column INT, FOREIGN KEY (foreign_key_column) REFERENCES table1(id));
  ```

- **UNIQUE**: Ensures that all values in a column are unique.
  ```sql
  CREATE TABLE table_name (column1 INT UNIQUE);
  ```